/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.anritsu.mcrepositorymanager.packageinfoparser;

import com.anritsu.mcrepositorymanager.dbbeans.DBMcActivities;
import com.anritsu.mcrepositorymanager.dbbeans.DBMcAvailabilities;
import com.anritsu.mcrepositorymanager.dbbeans.DBMcCustomers;
import com.anritsu.mcrepositorymanager.dbbeans.DBMcDependencies;
import com.anritsu.mcrepositorymanager.dbbeans.DBMcItemsReleased;
import com.anritsu.mcrepositorymanager.dbbeans.DBMcReleases;
import com.anritsu.mcrepositorymanager.dbcontroller.MainController;
import com.anritsu.mcrepositorymanager.shared.Filter;
import com.anritsu.mcrepositorymanager.shared.MCPackageActivities;
import com.anritsu.mcrepositorymanager.shared.McPackage;
import com.anritsu.mcrepositorymanager.shared.RecommendedMcPackage;
import com.anritsu.mcrepositorymanager.utils.ApplyFilter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import org.apache.maven.artifact.versioning.DefaultArtifactVersion;

/**
 *
 * @author RO100051
 */
public class DBParser implements PackageInfoParser {

    private String mcVersion;
    private static final Logger LOGGER = Logger.getLogger(DBParser.class.getName());
    private Filter filter;

    public DBParser(Filter filter) {
        mcVersion = filter.getMcVersion();
        this.filter = filter;

    }

    @Override
    public HashSet<McPackage> getPackageList(Filter filter) {
        this.filter = filter;
        HashSet<McPackage> mcPackages = new HashSet<>();
        HashSet<McPackage> mcPackagesDependencies = new HashSet<>();
        ApplyFilter applyFilter = new ApplyFilter(filter);
        HashSet<DBMcReleases> mcReleases = MainController.getInstance().getPackages(mcVersion);
        if (!mcReleases.isEmpty()) {
            for (DBMcReleases dbmcr : mcReleases) {
                McPackage mcp = getMcPackageFromDBMcReleases(dbmcr);
                if ((applyFilter.isMcPackageMatchRecommendedLatestFilter(mcp)
                        && applyFilter.isMcPackageMatchAvailabilityFilter(mcp)
                        && applyFilter.isMcPackageMatchCustomerFilter(mcp)
                        && applyFilter.isMcPackageMatchMcComponentFilter(mcp)
                        && applyFilter.isMcPackageMatchActivityFilter(mcp)
                        && applyFilter.isMcPackageMatchQ7admOutput(mcp))) {
                    mcp.setMatchFilter(true);
                    mcPackages.add(mcp);
                    LOGGER.log(Level.INFO, "Adding: {0}-{1}, {2}, {3}, {4}. list.size={5}", new Object[]{mcp.getName(), mcp.getPackageVersion(), mcp.getMcVersion(), mcp.getAvailability(), mcp.getCustomerList(), mcPackages.size()});
                }
            }
        }
        
        //Applying recommended filter
        HashSet<McPackage> mcPackagesFiltered = new HashSet<>();
        
        switch (filter.getRecommendedFilter()){
            case "recommended":
                // Adding GCA
                ArrayList<String> gcas = new ArrayList<String>();
                for(McPackage p: mcPackages){
                    if(p.getAvailability().equalsIgnoreCase("GCA")) {
                        mcPackagesFiltered.add(p);  
                        gcas.add(p.getName());                    
                    }
                }
                
                // Adding FCA if GCA is not present
                for(McPackage p: mcPackages){
                    if(!gcas.contains(p.getName())){
                        mcPackagesFiltered.add(p); 
                    }
                }
                
                // Adding other availabilities if selected
                for(McPackage p: mcPackages){
                    if(!p.getAvailability().equalsIgnoreCase("FCA") && !p.getAvailability().equalsIgnoreCase("GCA")) 
                        mcPackagesFiltered.add(p);
                }              
                break;
                
            case "latest validated":
                // Adding FCA
                ArrayList<String> fcas = new ArrayList<String>();
                for(McPackage p: mcPackages){
                    if(p.getAvailability().equalsIgnoreCase("FCA")) {
                        mcPackagesFiltered.add(p);  
                        fcas.add(p.getName());                    
                    }
                }
                
                // Adding FCA if GCA is not present
                for(McPackage p: mcPackages){
                    if(!fcas.contains(p.getName())){
                        mcPackagesFiltered.add(p); 
                    }
                }
                
                // Adding other availabilities if selected
                for(McPackage p: mcPackages){
                    if(!p.getAvailability().equalsIgnoreCase("FCA") && !p.getAvailability().equalsIgnoreCase("GCA")) 
                        mcPackagesFiltered.add(p);
                }
                break;
            case "latest released":
                mcPackagesFiltered = mcPackages;
                break;
        }

        // Solving dependencies
        mcPackagesDependencies = solveDependencies(mcPackagesFiltered);

        LOGGER.log(Level.INFO, "mcPackages match filter size: {0}", mcPackages.size());
        LOGGER.log(Level.INFO, "mcPackagesDependencies size: {0}", mcPackagesDependencies.size());
        mcPackagesFiltered.addAll(mcPackagesDependencies);
        LOGGER.log(Level.INFO, "mcPackages size after merge with mcPackagesDependencies: {0}", mcPackagesDependencies.size());
        return mcPackagesFiltered;
    }

    @Override
    public HashSet<String> getCustomers() {
        return new HashSet<>(MainController.getInstance().getCustomers(mcVersion));
    }

    @Override
    public HashSet<String> getAvailability() {
        return MainController.getInstance().getAvailabilities(mcVersion);
    }

    public String getMcVersion() {
        return mcVersion;
    }

    @Override
    public HashSet<String> getPackageNameList() {
        return new HashSet(MainController.getInstance().getPackagesName(mcVersion));
    }

    public HashSet<MCPackageActivities> getActivities() {
        return new HashSet<>(MainController.getInstance().getActivities(mcVersion));
    }

    @Override
    public String getMCVersion() {
        return this.mcVersion;
    }

    private HashSet<McPackage> getDependencies(McPackage mcPackage, Filter f) {
        HashSet<McPackage> mcPackageDependencies = new HashSet<>();
        DBMcReleases dbmcr = MainController.getInstance().getDBMcReleasesByNameVersion(mcPackage.getName(), mcPackage.getPackageVersion());
        if (dbmcr.getDBMcAvailabilitiesCollection() == null) {
            LOGGER.log(Level.INFO, "{0}-{1} not present in DB => no dependency! ", new Object[]{mcPackage.getName(), mcPackage.getPackageVersion()});
            return mcPackageDependencies;
        }

        for (DBMcAvailabilities dbmca : dbmcr.getDBMcAvailabilitiesCollection()) {
            if (mcPackage.getAvailability() != null && mcPackage.getAvailability().equalsIgnoreCase(dbmca.getAvailability()) && mcPackage.getMcVersion().equalsIgnoreCase(dbmca.getMcVersion())) {
                List<DBMcDependencies> dbMcDependencies = new ArrayList<>(dbmca.getDBMcDependenciesCollection());
                for (DBMcDependencies dbmcd : dbMcDependencies) {
                    McPackage mcpd = new McPackage();
                    String dbmcdName = dbmcd.getRequiredComponent();
                    String dbmcdVersion = dbmcd.getRequiredVersion().replaceAll("\\+", "");
                    boolean greater = (dbmcd.getRequiredVersion().contains("+"));
                    mcpd.setName(dbmcdName);
                    mcpd.setPackageVersion(dbmcdVersion);
                    mcpd.setMcVersion(mcPackage.getMcVersion());
                    if (filter.isRecommended()) {
                        mcpd = getRecommendedMcPackage(mcpd);
                        LOGGER.log(Level.INFO, mcPackage.getName() + "-" + mcPackage.getPackageVersion() + " depends on (recommended): " + mcpd.getName() + "-" + mcpd.getPackageVersion());
                    } else {
                        mcpd = getLatestMcPackage(mcpd, greater);
                        LOGGER.log(Level.INFO, mcPackage.getName() + "-" + mcPackage.getPackageVersion() + " depends on (latest): " + mcpd.getName() + "-" + mcpd.getPackageVersion());
                    }

                    if (mcpd.getName() == null) {
                        mcpd.setName(dbmcdName);
                        mcpd.setPackageVersion(dbmcdVersion);
                        LOGGER.log(Level.INFO, mcPackage.getName() + "-" + mcPackage.getPackageVersion() + " depends on (not in DB): " + mcpd.getName() + "-" + mcpd.getPackageVersion());
                    }

                    mcpd.setDependency(true);
                    mcPackageDependencies.add(mcpd);
                }
            }
        }
        LOGGER.log(Level.INFO, "There are {2} dependencies for {0}-{1}: ", new Object[]{mcPackage.getName(), mcPackage.getPackageVersion(), mcPackageDependencies.size()});
        mcPackageDependencies.stream().forEach((p) -> {
            LOGGER.log(Level.INFO, "{0}-{1}", new Object[]{p.getName(), p.getPackageVersion()});
        });
        return mcPackageDependencies;
    }

    private McPackage getMcPackageFromDBMcReleases(DBMcReleases dbmcr) {
        McPackage mcp = new McPackage();
        mcp.setTier(dbmcr.getComponentTier());
        mcp.setGroup(dbmcr.getComponentRole());
        mcp.setName(dbmcr.getComponentName());
        mcp.setPackageVersion(dbmcr.getComponentVersion());
        Collection<DBMcItemsReleased> releasedItem = dbmcr.getDBMcItemsReleasedCollection();
        ArrayList<String> downloadLinks = new ArrayList<>();
        for(DBMcItemsReleased dbmcir: releasedItem){
            downloadLinks.add(dbmcir.getItemLocation());
        }
        mcp.setDownloadLinks(new HashSet(downloadLinks));
        String dowloadLink[] = mcp.getDownloadLinks().iterator().next().split("/");
        mcp.setFileName(dowloadLink[dowloadLink.length - 1]);

        // Set availability
        for (DBMcAvailabilities dbmca : dbmcr.getDBMcAvailabilitiesCollection()) {
            if (dbmca.getMcVersion().equals(mcVersion)) {
                mcp.setMcVersion(mcVersion);
                mcp.setAvailability(dbmca.getAvailability());

                // Set recommended
                try {
                    mcp.setRecommended(dbmca.getIsRecommended());
                } catch (NullPointerException ex) {
                    mcp.setRecommended(false);
                }

                // Set latest
                DBMcAvailabilities latestDbmca = MainController.getInstance().getLatestVersion(dbmca);
                if (latestDbmca.equals(dbmca)) {
                    mcp.setLatest(true);
                }

                // Set Notes
                try {
                    mcp.setNotes(dbmca.getNotes());
                } catch (Exception exp) {
                    mcp.setNotes(exp.getMessage());
                }

                // Set customers
                HashSet<String> customers = new HashSet<>();
                for (DBMcCustomers dbmcc : dbmca.getDBMcCustomersCollection()) {
                    customers.add(dbmcc.getCustomerName());
                }
                mcp.setCustomerList(customers);
                LOGGER.log(Level.INFO, "Adding customers: {4} to {0}-{1}, {2}, {3}", new Object[]{mcp.getName(), mcp.getPackageVersion(), mcp.getMcVersion(), mcp.getAvailability(), mcp.getCustomerList()});
            }
        }

        // Set activities
        HashSet<MCPackageActivities> activities = new HashSet<>();
        for (DBMcActivities dbmca : dbmcr.getDBMcActivitiesCollection()) {
            MCPackageActivities mcpa = new MCPackageActivities();
            mcpa.setReleaseId(String.valueOf(dbmca.getReleaseId().getReleaseId()));
            mcpa.setActivityId(String.valueOf(dbmca.getActivityActivityId()));
            mcpa.setActivityType(dbmca.getActivityType());
            mcpa.setActivityText(dbmca.getActivityText());
            activities.add(mcpa);
        }
        mcp.setActivities(activities);

        return mcp;
    }

    private RecommendedMcPackage getRecommendedMcPackageFromDBMcReleases(DBMcReleases dbmcr) {
        System.out.println("Processing " + dbmcr.getComponentName());
        RecommendedMcPackage rmcp = new RecommendedMcPackage();
        rmcp.setMcVersion(mcVersion);
        for (DBMcAvailabilities dbmca : dbmcr.getDBMcAvailabilitiesCollection()) {
            if (dbmca.getMcVersion().equalsIgnoreCase(mcVersion)) {
                if (!rmcp.isShowInTable()) {
                    boolean showInTable = false;                    
                    try {
                        showInTable = dbmca.getIsRecommended();
                    } catch (Exception exp) {
                        exp.printStackTrace();
                        showInTable = true;
                    }
                    rmcp.setShowInTable(showInTable);
                    if(dbmca.getReleaseId().getComponentName().equalsIgnoreCase("cdb-if") ||
                       dbmca.getReleaseId().getComponentName().equalsIgnoreCase("cdb-model") ||
                       dbmca.getReleaseId().getComponentName().equalsIgnoreCase("plib")){
                        LOGGER.log(Level.INFO, "{0}-{1} : showInTable:{2}", new Object[]{rmcp.getPackageName(), rmcp.getAvailability(), rmcp.isShowInTable()});
                    }
                } 
            }

            if (dbmca.getMcVersion().equalsIgnoreCase(mcVersion)) {
                rmcp.setTier(dbmcr.getComponentTier());
                rmcp.setGroup(dbmcr.getComponentGroup());
                rmcp.setPackageName(dbmcr.getComponentName());
                rmcp.setAvailability(dbmca.getAvailability());

                ArrayList<McPackage> versions = new ArrayList<>();
                for (DBMcAvailabilities dbmcav : MainController.getInstance().getmcPackageVersions(dbmcr.getComponentName(), dbmca.getMcVersion(), dbmca.getAvailability())) {
                    versions.add(getMcPackageFromDBMcReleases(dbmcav.getReleaseId()));
                }
                rmcp.setPackageVersions(versions);

                McPackage recommendedVersion = new McPackage();
                if (MainController.getInstance().getRecommendedVersion(dbmca) != null) {
                    recommendedVersion = getMcPackageFromDBMcReleases(MainController.getInstance().getRecommendedVersion(dbmca).getReleaseId());
                    rmcp.setRecommendedVersion(recommendedVersion);
                    for (McPackage p : versions) {
                        System.out.println(p.getPackageVersion());
                        System.out.println(rmcp.getRecommendedVersion().getPackageVersion());
                        DefaultArtifactVersion v = new DefaultArtifactVersion(p.getPackageVersion().split("-")[0]);
                        DefaultArtifactVersion vRecommended = new DefaultArtifactVersion(rmcp.getRecommendedVersion().getPackageVersion().split("-")[0]);
                        if (v.compareTo(vRecommended) > 0) {
                            rmcp.setRecommendedVersionCandidate(true);
                        }
                    }
                }

            }
        }
        LOGGER.log(Level.INFO, "{0}-{1} : showInTable:{2}", new Object[]{rmcp.getPackageName(), rmcp.getAvailability(), rmcp.isShowInTable()});
        return rmcp;
    }

    private McPackage getLatestMcPackage(McPackage mcPackage, boolean greater) {
        McPackage p = new McPackage();
        List<DBMcReleases> dbmcrList = MainController.getInstance().getDBMcReleasesByPackageName(mcPackage.getName());
        if (dbmcrList == null || dbmcrList.isEmpty()) {
            return p;
        }
        for (DBMcReleases dbmcr : dbmcrList) {
            for (DBMcAvailabilities dbmca : dbmcr.getDBMcAvailabilitiesCollection()) {
                if (dbmca.getMcVersion().equalsIgnoreCase(mcPackage.getMcVersion())
                        /**
                         * check availability *
                         */
                        && greater) {
                    p = getMcPackageFromDBMcReleases(MainController.getInstance().getLatestVersion(dbmca).getReleaseId());
                } else if (dbmca.getMcVersion().equalsIgnoreCase(mcPackage.getMcVersion())
                        /**
                         * check availability *
                         */
                        && greater) {
                    p = getMcPackageFromDBMcReleases(MainController.getInstance().getDBMcReleasesByNameVersion(mcPackage.getName(), mcPackage.getPackageVersion()));
                }
            }
        }

        return p;
    }

    private McPackage getRecommendedMcPackage(McPackage mcPackage) {
        DBMcReleases dbmcr = MainController.getInstance().getRecommendedMcRelease(mcPackage.getName(), mcPackage.getMcVersion());
        if (dbmcr != null) {
            return getMcPackageFromDBMcReleases(dbmcr);
        } else {
            return new McPackage();
        }

    }

    @Override
    public HashSet<McPackage> solveDependencies(HashSet<McPackage> mcPackages) {
        HashSet<McPackage> mcPackgesWithDependencies = new HashSet<>(mcPackages);
        for (McPackage p : mcPackages) {
            if (!p.isDependencySolved()) {
                LOGGER.log(Level.INFO, "Solving dependencies for: {0}-{1}!", new Object[]{p.getName(), p.getPackageVersion()});
                HashSet<McPackage> dependencies = getDependencies(p, filter);
                LOGGER.log(Level.INFO, p.getName() + " have " + dependencies.size() + " dependencies!");
                p.setDependencies(dependencies);
                p.setDependencySolved(true);
                LOGGER.log(Level.INFO, "Dependency solved for: {0}-{1}!", new Object[]{p.getName(), p.getPackageVersion()});
                dependencies.stream().forEach((dep) -> {
                    HashSet<McPackage> dependencyFor = dep.getDependencyFor();
                    dependencyFor.add(p);
                    dep.setDependencyFor(dependencyFor);
                });
                mcPackgesWithDependencies.add(p);

                for (McPackage pDependency : dependencies) {
                    mcPackgesWithDependencies.add(pDependency);
                }
                mcPackgesWithDependencies = solveDependencies(mcPackgesWithDependencies);
            }

        }
        return mcPackgesWithDependencies;
    }

    @Override
    public ArrayList<RecommendedMcPackage> getPackageListForReleaseManagement() {
        Set<RecommendedMcPackage> packagesList = new HashSet<>();
        HashSet<DBMcReleases> dbMcReleases = MainController.getInstance().getPackages(mcVersion);
        for (DBMcReleases release : dbMcReleases) {
            RecommendedMcPackage p = getRecommendedMcPackageFromDBMcReleases(release);
            if (p.getPackageName() != null) {
                if(packagesList.contains(p) && p.isShowInTable()){
                    packagesList.remove(p);
                    packagesList.add(p);
                }else if(!packagesList.contains(p)){
                    packagesList.add(p);
                }
            }

        }
        LOGGER.log(Level.INFO, "Returning " + packagesList.size() + " packages for RSS!");
        packagesList.stream().distinct().collect(Collectors.toList());

        return new ArrayList<RecommendedMcPackage>(packagesList);
    }
}
